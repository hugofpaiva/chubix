typeValue ::= [
    "Integer"  : "int",
    "Double"     : "double",
    "Boolean"  : "boolean",
    "String"   : "String",
    default    : "null"
]

module(name,inst,func) ::= <<
import java.util.Scanner;

public class <name> {
    public static Scanner sc = new Scanner(System.in); 

    <functions(func)>

    public static void main(String[] args){
        <insts(inst)>
    };
}
>>

insts(inst) ::= <<
<if(inst)><inst; separator="\n"><endif>
>>

print(inst, value) ::= <<
<insts(inst)>
System.out.println(<value>);
>>

// Input
input(value, type, var,inst) ::= <<
System.out.println(<value>);
<declaration(typeValue.(type), var, "sc.nextLine()", inst)>
>>

// Declaration serve para o declaration e para o assign
declaration(type,var,value,inst) ::= <<<if(inst)><insts(inst)><endif>
<if(type)><typeValue.(type)><endif> <var><if(value)> = <value>;<endif>
>>

binaryOperation(inst,type,var,e1,op,e2) ::= <<
<declaration(type, var, [e1, " ", op, " ", e2], inst)>
>>

insert(var)::="<var>;" 

funcReturn(inst,var) ::= <<
<if(inst)><insts(inst)><endif>
return <if(var)><var><endif>;
>>

powerExpr(type,var,e1,e2,inst) ::="<declaration(type,var,[\"Math.pow(\", e1, \", \", e2, \")\"],inst)>"

cond(instif, var, trueInst, falseInst) ::= <<
<insts(instif)>
if(<var>){
    <insts(trueInst)>
}<if(falseInst)>else{ 
    <insts(falseInst)>
}<endif>
>>




whileLoop(var, instafter, instbefore, instfor) ::= <<
<if(instfor)><insts(instfor)><endif>
while (true) {
    <insts(instbefore)>
    if (!<var>){
        break;
    }
    <insts(instafter)>
}
>>




functions(func) ::= <<
<if(func)> <func; separator="\n\n"><endif>
>>

//passar o tipo de dados dos args
function(type, name, args, inst) ::= << 
    
    public static <type> <name> (<if(args)><args;separator=","> <endif>){
        <insts(inst)>
    }
>>