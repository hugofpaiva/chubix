typeValue ::= [
    "Integer"  : "int",
    "integer"  : "int",
    "Double"   : "double",
    "Boolean"  : "boolean",
    "String"   : "String",
    "double"   : "double",
    "boolean"  : "boolean",
    "string"   : "String",
    "int"      : "int",
    "void"     : "void",
    "Void"     : "void",
    default    : "null"
]

scanner ::= [
    "Integer"  : "sc.nextInt()",
    "Double"   : "sc.nextDouble()",
    "String"   : "sc.nextLine()",
    "integer"  : "sc.nextInt()",
    "double"   : "sc.nextDouble()",
    "string"   : "sc.nextLine()",
    "int"      : "sc.nextInt()",
    default    : "sc.nextLine()"
]

module(name,inst,func) ::= <<
import java.util.Scanner;

public class <name> {
    public static Scanner sc = new Scanner(System.in); 

    <functions(func)>

    public static void main(String[] args){
        <insts(inst)>
    };
}
>>

insts(inst) ::= <<
<if(inst)><inst; separator="\n"><endif>
>>

print(inst, value) ::= <<
<insts(inst)>
System.out.println(<value>);
>>

input(value, type, var, typescan, inst) ::= <<
<if(value)>System.out.println(<value>);<endif>
<declaration(type, var, scanner.(typescan), inst)>
>>

declaration(type,var,value,inst) ::= <<<if(inst)><insts(inst)><endif>
<if(type)><typeValue.(type)><endif> <var><if(value)> = <value><endif>;
>>

binaryOperation(inst,type,var,e1,op,e2) ::= <<
<declaration(type, var, [e1, op, e2], inst)>
>>

insert(var)::="<var>;" 

funcReturn(inst,var) ::= <<
<if(inst)><insts(inst)><endif>
return <if(var)><var><endif>;
>>

powerExpr(type,var,e1,e2,inst) ::="<declaration(type,var,[\"Math.pow(\", e1, \", \", e2, \")\"],inst)>"

cond(instif, var, trueInst, falseInst) ::= <<
<insts(instif)>
if(<var>){
    <insts(trueInst)>
}<if(falseInst)>else{ 
    <insts(falseInst)>
}<endif>
>>




whileLoop(var, instafter, instbefore, instfor) ::= <<
<if(instfor)><insts(instfor)><endif>
while (true) {
    <insts(instbefore)>
    if (!<var>){
        break;
    }
    <insts(instafter)>
}
>>


callFunction(inst,args,name) ::=<<
<if(inst)><insts(inst)><endif>
<name>(<if(args)><args; separator=","><endif>);
>>

functions(func) ::= <<
<if(func)> <func; separator="\n\n"><endif>
>>

//passar o tipo de dados dos args
function(type, name, args, inst) ::= << 
    public static <typeValue.(type)> <name> (<if(args)><args; separator=", "><endif>){
        <insts(inst)>
    }
>>