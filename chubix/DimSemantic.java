import static java.lang.System.*;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.HashMap;
import java.util.Map;

public class DimSemantic extends dimensionsBaseVisitor<Symbol> {

/*
   @Override public Value visitMain(dimensionsParser.MainContext ctx) {
      return visitChildren(ctx);
   }

   @Override public Value visitStatList(dimensionsParser.StatListContext ctx) {
      return visitChildren(ctx);
   }

   @Override public Value visitStat(dimensionsParser.StatContext ctx) {
      return visitChildren(ctx);
   }
*/

   @Override public Symbol visitRelativeDim(dimensionsParser.RelativeDimContext ctx) {
      String dim = ctx.ID(0).getText();
      
      if (dimensionsParser.dimTable.containsKey(dim)) {
         ErrorHandling.printError(ctx, "Dimension \""+ dim +"\" already defined.");
         return null;
      }
      
      Symbol symb = visit(ctx.unitdim());
      DimensionsType relDim = (DimensionsType) symb.type();

      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()) {
         if (dimensionsType.containsUnit(relDim.getUnit())) {
            ErrorHandling.printError(ctx, "Unit \""+mapToString(relDim.getUnit())+"\" already defined.");
            return null;
         }
      }

      Type type = relDim.getType();
      
      if (ctx.ID(1)!=null) {
         String newUnit = ctx.ID(1).getText();
         HashMap<String, Integer> unit = new HashMap<>();
         unit.put(newUnit,1);
         
         for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()) {
            if (dimensionsType.containsUnit(unit)) {
               ErrorHandling.printError(ctx, "Unit \""+mapToString(unit)+"\" already defined.");
               return null;
            }
         }

         DimensionsType newRelDim = new DimensionsType(dim, unit, type); // add default
         newRelDim.addUnit(relDim.getUnit(), 1.0); // add the new 

         dimensionsParser.dimTable.put(dim, newRelDim);  //add dim to map dimTable
      } else{
         dimensionsParser.dimTable.put(dim, new DimensionsType(dim, relDim.getUnit(), type));  // add dim to map dimTable with a default unit generated by the the relationship of dims
      }
      
      return null;
   }


   @Override public Symbol visitPrimitiveDim(dimensionsParser.PrimitiveDimContext ctx) {
      String dim = ctx.ID(0).getText();
      String newUnit = ctx.ID(1).getText();
      HashMap<String, Integer> unit = new HashMap<>();
      unit.put(newUnit,1);
      Type type = ctx.type().res;
      
      if (dimensionsParser.dimTable.containsKey(dim)) {
         ErrorHandling.printError(ctx, "Dimension \""+ dim +"\" already defined.");
         return null;
      }
      
      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()) {
         if (dimensionsType.containsUnit(unit)) {
            ErrorHandling.printError(ctx, "Unit \""+mapToString(unit)+"\" already defined.");
            return null;
         } 
      }
      dimensionsParser.dimTable.put(dim, new DimensionsType(dim, unit, type));  //add dim to map dimTable
      return null;
   }

   @Override public Symbol visitUnit(dimensionsParser.UnitContext ctx) {
      String dim = ctx.ID(0).getText();

      if (!dimensionsParser.dimTable.containsKey( dim )) {
         ErrorHandling.printError(ctx, "Dimension \""+ dim +"\" not defined.");
         return null;
      }

      DimensionsType dimType = dimensionsParser.dimTable.get(dim);

      String newUnit = ctx.ID(1).getText();
      HashMap<String, Integer> unit = new HashMap<>();
      unit.put(newUnit,1);

      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()) {
         if (dimensionsType.containsUnit(unit)) {
            ErrorHandling.printError(ctx, "Unit \""+mapToString(unit)+"\" already defined.");
            return null;
         } 
      }

      Symbol sym = visit(ctx.expr());
      Type dimUnit = sym.type();

      if (!dimType.containsUnit(((DimensionsType) dimUnit).getUnit())) {  
         ErrorHandling.printError(ctx, "Dimension \""+ dimType.name() +"\" and \""+ ctx.expr.getText()+"\" are not compatible.");
         return null;
      }

      Double convert_value = sym.value().doubleValue();
      dimensionsParser.dimTable.get(dim).addUnit(unit, convert_value);
      return null;
   }


   @Override public Symbol visitExprSign(dimensionsParser.ExprSignContext ctx) {
      if (ctx.sign.getText().equals("-")) {
         Symbol sym = visitChildren(ctx);
         sym.value().setDoubleValue(-sym.value().doubleValue());
         return sym;
      }
      return visitChildren(ctx); 
   }

   @Override public Symbol visitExprUnn(dimensionsParser.ExprUnnContext ctx) {
      return visit(ctx.expr());
   }

   @Override public Symbol visitExprDouble(dimensionsParser.ExprDoubleContext ctx) {
      return new Symbol(new DoubleType(), new DoubleValue(Double.parseDouble(ctx.DOUBLE().getText())));
   }

   @Override public Symbol visitExprInt(dimensionsParser.ExprIntContext ctx) {
      return new Symbol(new DoubleType(), new DoubleValue(Double.parseDouble(ctx.INTEGER().getText())));
   }

   @Override public Symbol visitExprID(dimensionsParser.ExprIDContext ctx) {
      String newUnit = ctx.ID().getText();
      HashMap<String, Integer> unit = new HashMap<>();
      unit.put(newUnit,1);

      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()){
         if (dimensionsType.containsUnit(unit)) {
            Symbol temp = new Symbol(dimensionsType, new DoubleValue(dimensionsType.getUnits().get(unit)));
            temp.setDim(dimensionsType.name());
            return temp;
         }
      }
      ErrorHandling.printError(ctx, "Unit \""+unit+"\" not defined.");
      return null;
   }

   @Override public Symbol visitExprSumMin(dimensionsParser.ExprSumMinContext ctx) {
      String op = ctx.op.getText();
      Symbol v1 = visit(ctx.expr(0)); 
      Symbol v2 = visit(ctx.expr(1));

      // semantic check
      if (!v1.type().conformsTo(v2.type())) {
         ErrorHandling.printError(ctx, "Units are not compatible.");
         return null;
      }

      Type resType = new DoubleType(); 
      if (!v1.dim().equals(""))
         resType = v1.type();

      Symbol resSymb;
      switch (op) {
         case "+":
            resSymb = new Symbol(resType, new DoubleValue(v1.value().doubleValue() + v2.value().doubleValue()));
            if (resType.name().equals("integer") ||  resType.name().equals("double"))
               return resSymb;          
            resSymb.setDim(resType.name());
            return resSymb;
         case "-":
            resSymb = new Symbol(resType,  new DoubleValue(v1.value().doubleValue() - v2.value().doubleValue()));
            if (resType.name().equals("integer") ||  resType.name().equals("double"))
               return resSymb;          
            resSymb.setDim(resType.name());
            return resSymb;
      }
      return null;
   }


   @Override public Symbol visitExprMultDiv(dimensionsParser.ExprMultDivContext ctx) {
      String op = ctx.op.getText();

      Symbol v1 = visit(ctx.expr(0));
      Symbol v2 = visit(ctx.expr(1));

      Type resType = null;
      String unit;
      
      if (!v1.dim().equals("")) {
         if (v1.dim().equals(v2.dim())) {
            unit = ((DimensionsType) v1.type()).getUnit()+op+((DimensionsType)v2.type()).getUnit();
            switch (op) {
               case "*":
                  resType = getExistingDimType(unit);
                  if (resType == null){
                     ErrorHandling.printError(ctx, "Dimension with the unit \""+unit+"\" does not exist.");
                     return null;
                  }
                  break;
               case "/":
                  resType = new DoubleType();
                  break;
            }
         } else {
            if (!v2.dim().equals("")){
               unit = ((DimensionsType) v1.type()).getUnit()+op+((DimensionsType)v2.type()).getUnit();
               // check if complex dimension exists    
               for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()){
                  if (dimensionsType.getUnits().containsKey(unit)) {
                     resType = dimensionsType;
                  }
               }
               if (resType == null){
                  ErrorHandling.printError(ctx, "Dimension with the unit \""+unit+"\" does not exist.");
                  return null; 
               }
            } else
               resType = v1.type();
         }
      } else
         resType = new DoubleType();  


      Symbol resSymb;
      switch (op) {
         case "*":
            resSymb = new Symbol(resType,  new DoubleValue(v1.value().doubleValue() * v2.value().doubleValue()));
            if (resType.name().equals("integer") ||  resType.name().equals("double"))
               return resSymb;          
            resSymb.setDim(resType.name());
            return resSymb;
         case "/":
            if (v2.value().doubleValue()==0.0){
               ErrorHandling.printError(ctx, "Can't divide by zero.");
               return null;
            }
            resSymb = new Symbol(resType,  new DoubleValue(v1.value().doubleValue() / v2.value().doubleValue()));
            if (resType.name().equals("integer") ||  resType.name().equals("double"))
               return resSymb;          
            resSymb.setDim(resType.name());
            return resSymb;
      }
      return null;
   }

   @Override public Symbol visitExprPower(dimensionsParser.ExprPowerContext ctx) {
      Symbol v1 = visit(ctx.expr(0));
      Symbol v2 = visit(ctx.expr(1));

      Type resType = null;
      Symbol resSymb;
      String unit;
      if (!v1.dim().equals("")){
         if (v1.dim().equals(v2.dim())) {
            unit = ((DimensionsType) v1.type()).getUnit()+"^"+((DimensionsType)v2.type()).getUnit();
            resType = getExistingDimType(unit);
            if (resType == null){
               ErrorHandling.printError(ctx, "Dimension with the unit \""+unit+"\" does not exist.");
               return null;
            }
         } else {
            if (!v2.dim().equals("")){
               unit = ((DimensionsType) v1.type()).getUnit()+"^"+((DimensionsType)v2.type()).getUnit();
               resType = getExistingDimType(unit);
               if (resType == null){
                  ErrorHandling.printError(ctx, "Dimension with the unit \""+unit+"\" does not exist.");
                  return null;
               }
            } else
               resType = v1.type();
         }
         resSymb = new Symbol(resType, new DoubleValue(Math.pow(v1.value().doubleValue(),v2.value().doubleValue())));
         resSymb.setDim(resType.name());
      } else {
         resType = new DoubleType();
         resSymb = new Symbol(resType, new DoubleValue(Math.pow(v1.value().doubleValue(),v2.value().doubleValue())));
      }

      return resSymb;
   }


   @Override public Symbol visitDimPower(dimensionsParser.DimPowerContext ctx) {
      Symbol s1 = visit(ctx.unitdim());
      Type resType = null;

      DimensionsType dim1 = (DimensionsType) s1.type();
      HashMap<String,Integer> map1 = dim1.getUnit();

      int i;
      if (ctx.sign != null)
         i = Integer.parseInt(ctx.sign.getText()+ctx.INTEGER().getText());
      else
         i = Integer.parseInt(ctx.INTEGER().getText());

      if(i==0){
         ErrorHandling.printError(ctx, "Power of 0 is not possible when defining a unit");
         return null;
      }

      map1.forEach((k, v) -> {
         map1.put(k, (int) Math.pow(map1.get(k), i));
      });

      dim1.setUnit(map1);

      Symbol resSymb = new Symbol(dim1, new DoubleValue(1.0));

      return resSymb;
   }

   @Override public Symbol visitDimUnn(dimensionsParser.DimUnnContext ctx) {
      return visit(ctx.unitdim());
   }

   @Override public Symbol visitDimMultDiv(dimensionsParser.DimMultDivContext ctx) {
      Symbol s1 = visit(ctx.unitdim(0));
      Symbol s2 = visit(ctx.unitdim(1));
      Type resType = null;

      DimensionsType dim1 = (DimensionsType) s1.type();
      DimensionsType dim2 = (DimensionsType) s2.type();
      HashMap<String,Integer> map1 = dim1.getUnit();
      HashMap<String,Integer> map2 = dim2.getUnit();

      switch(ctx.op.getText()){
         case "*":
            //Merge maps
            map1.forEach((k, v) -> map2.merge(k, v, (v1, v2) -> v1 + v2));
            map1.forEach((k, v) -> {
               map2.putIfAbsent(k, v);
            });
            map2.values().removeIf(f -> f == 0f);

            dim2.setUnit(map2);
            break;
         case "/":
            map1.forEach((k, v) -> map2.merge(k, v, (v1, v2) -> v1 - v2));
            map1.forEach((k, v) -> {
               map2.putIfAbsent(k, v);
            });
            map2.values().removeIf(f -> f == 0f);                                
            dim2.setUnit(map2);
            break;
      }
   
      if ( (dim1.getType().name().equals("integer")) || (dim2.getType().name().equals("integer")) )
        dim2.setType(new IntegerType());
      
      Symbol resSymb = new Symbol(dim2, new DoubleValue(1.0));
      return resSymb;
   }

   @Override public Symbol visitDimID(dimensionsParser.DimIDContext ctx) {
      String dim = ctx.ID().getText();
      // check if ID exists
      for (String dimName : dimensionsParser.dimTable.keySet()){
         if (dimName.equals(dim)) {
            Symbol temp = new Symbol(dimensionsParser.dimTable.get(dimName), new DoubleValue(1.0));
            return temp;
         }
      }
      ErrorHandling.printError(ctx, "Dimension \""+dim+"\" not defined.");
      return null;
   }

   private DimensionsType checkUnit(HashMap<String,Integer> map){
     for (DimensionsType dimType : dimensionsParser.dimTable.values()) {
         if (dimType.containsUnit(map))
            return dimType;
     }
     return null;
   }

   private Type fetchType(Type t1, Type t2) {
      Type res = null;
      
      if (t1.isNumeric() && t2.isNumeric())
      {
         if ("double".equals(t1.name()))
            res = t1;
         else if ("double".equals(t2.name()))
            res = t2;
         else
            res = t1;
      }
      else if ("boolean".equals(t1.name()) && "boolean".equals(t2.name()))
         res = t1;
      else if ("string".equals(t1.name()) && "string".equals(t2.name()))
         res = t1;
      return res;
   }

   public static String mapToString(HashMap<String, Integer> map) {
        String str = "";
        for (String unit : map.keySet())
            str += unit +"^" +map.get(unit) + "*";
        str = str.substring(0, str.length()-1);
        return str;
   }
}