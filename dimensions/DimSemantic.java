import static java.lang.System.*;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.HashMap;
import java.util.Map;

public class DimSemantic extends dimensionsBaseVisitor<Symbol> {

/*
   @Override public Value visitMain(dimensionsParser.MainContext ctx) {
      return visitChildren(ctx);
   }

   @Override public Value visitStatList(dimensionsParser.StatListContext ctx) {
      return visitChildren(ctx);
   }

   @Override public Value visitStat(dimensionsParser.StatContext ctx) {
      return visitChildren(ctx);
   }
*/

   @Override public Symbol visitRelativeDim(dimensionsParser.RelativeDimContext ctx) {
      String dim = ctx.ID(0).getText();
      
      if (dimensionsParser.dimTable.containsKey(dim)) {
         ErrorHandling.printError(ctx, "Dimension \""+ dim +"\" already defined.");
         return null;
      }
      
      Symbol symb = visit(ctx.unitdim());
      DimensionsType relDim = (DimensionsType) symb.type();
      Type type = relDim.getType();
      
      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()) {
         if (dimensionsType.getUnits().containsKey(relDim)) {
            ErrorHandling.printError(ctx, "Unit \""+relDim+"\" already defined.");
            return null;
         }
      }

      if (ctx.ID(1)!=null) {
         String unit = ctx.ID(1).getText();
         
         for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()) {
            if (dimensionsType.getUnits().containsKey(unit)) {
               ErrorHandling.printError(ctx, "Unit \""+unit+"\" already defined.");
               return null;
            }
         }
         
         DimensionsType newRelDim = new DimensionsType(dim, unit, type);
         newRelDim.getUnits().put(relDim.getUnit(), 1.0);   // add default unit to dim

         dimensionsParser.dimTable.put(dim, newRelDim);  //add dim to map dimTable
      } else{
         dimensionsParser.dimTable.put(dim, new DimensionsType(dim, relDim.getUnit(), type));  // add dim to map dimTable with a default unit generated by the the relationship of dims
      }
      
      return null;
   }


   @Override public Symbol visitPrimitiveDim(dimensionsParser.PrimitiveDimContext ctx) {
      String dim = ctx.ID(0).getText();
      String unit = ctx.ID(1).getText();
      Type type = ctx.type().res;
      
      if (dimensionsParser.dimTable.containsKey(dim))
      {
         ErrorHandling.printError(ctx, "Dimension \""+ dim +"\" already defined.");
         return null;
      }
      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()) {
         if (dimensionsType.getUnits().containsKey(unit)) {
            ErrorHandling.printError(ctx, "Unit \""+unit+"\" already defined.");
            return null;
         }
      }     
      dimensionsParser.dimTable.put(dim, new DimensionsType(dim, unit, type));  //add dim to map dimTable

      for (Map.Entry dimensionsType : dimensionsParser.dimTable.entrySet()){
         System.out.println(dimensionsType.getKey());
         System.out.println("\ndefault Unit of dim : "+ ((DimensionsType) dimensionsType.getValue()).getUnit()+"\n");
         for (Map.Entry unit_dim : ((DimensionsType) dimensionsType.getValue()).getUnits().entrySet()){
            System.out.println(unit_dim.getKey()+" value : "+ unit_dim.getValue()+"\n");
         }
         System.out.println("-------------------------------------");
      }

      return null;
   }

   @Override public Symbol visitUnit(dimensionsParser.UnitContext ctx) {
      String dim = ctx.ID(0).getText();

      if (!dimensionsParser.dimTable.containsKey( dim ))
      {
         ErrorHandling.printError(ctx, "Dimension \""+ dim +"\" already defined.");
         // sys exit
         return null;
      }

      Type dimType = dimensionsParser.dimTable.get(dim);

      String unit = ctx.ID(1).getText();

      Symbol sym = visit(ctx.expr()); // returns the value of the unit

      Double convert_value = sym.value().doubleValue();

      
      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()){
         if (dimensionsType.getUnits().containsKey(unit)) {
            ErrorHandling.printError(ctx, "Unit \""+unit+"\" already defined.");
            return null;
         }
      }

      dimensionsParser.dimTable.get(dim).getUnits().put(unit, convert_value);

      return visitChildren(ctx);
   }


   @Override public Symbol visitExprSign(dimensionsParser.ExprSignContext ctx) {
      if (ctx.sign.getText().equals("-")) {
         Symbol sym = visitChildren(ctx);
         sym.value().setDoubleValue(-sym.value().doubleValue());
         return sym;
      }
      return visitChildren(ctx);
   }

   // @Override public Symbol visitExprUnn(dimensionsParser.ExprUnnContext ctx) {
   //    return visitChildren(ctx);
   // }

   @Override public Symbol visitExprDouble(dimensionsParser.ExprDoubleContext ctx) {
      return new Symbol(new DoubleType(), new DoubleValue(Double.parseDouble(ctx.DOUBLE().getText())));
   }

   @Override public Symbol visitExprSumMin(dimensionsParser.ExprSumMinContext ctx) {
      String op = ctx.op.getText();

      Symbol v1 = visit(ctx.expr(0)); 
      Symbol v2 = visit(ctx.expr(1));

      // semantic check
      if (!v1.type().conformsTo(v2.type())) {
         ErrorHandling.printError(ctx, "Units are not compatible.");
         return null;
      }

      Type resType = new DoubleType(); 
      if (!v1.dim().equals(""))
         resType = v1.type();

      Symbol resSymb;
      switch (op) {
         case "+":
            resSymb = new Symbol(resType, new DoubleValue(v1.value().doubleValue() + v2.value().doubleValue()));
            if (resType.name().equals("integer") ||  resType.name().equals("double"))
               return resSymb;          
            resSymb.setDim(resType.name());
            return resSymb;
         case "-":
            resSymb = new Symbol(resType,  new DoubleValue(v1.value().doubleValue() - v2.value().doubleValue()));
            if (resType.name().equals("integer") ||  resType.name().equals("double"))
               return resSymb;          
            resSymb.setDim(resType.name());
            return resSymb;
      }
      return null;
   }

   @Override public Symbol visitExprInt(dimensionsParser.ExprIntContext ctx) {
      return new Symbol(new DoubleType(), new DoubleValue(Double.parseDouble(ctx.INTEGER().getText())));
   }

   @Override public Symbol visitExprMultDiv(dimensionsParser.ExprMultDivContext ctx) {
      String op = ctx.op.getText();

      Symbol v1 = visit(ctx.expr(0));
      Symbol v2 = visit(ctx.expr(1));

      Type resType = null;
      
      if (!v1.dim().equals("")) {
         String unit = ((DimensionsType) v1.type()).getUnit()+op+((DimensionsType)v2.type()).getUnit();
         if (v1.dim().equals(v2.dim())) {
            switch (op) {
               case "*":
                  resType = getExistingDimType(unit);
                  if (resType == null){
                     ErrorHandling.printError(ctx, "Dimension with the unit \""+unit+"\" does not exist.");
                     return null;
                  }
                  break;
               case "/":
                  resType = new DoubleType();
                  break;
            }
         } else {
            if (!v2.dim().equals("")){
               // check if complex dimension exists    
               for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()){
                  if (dimensionsType.getUnits().containsKey(unit)) {
                     resType = dimensionsType;
                  }
               }
               if (resType == null){
                  ErrorHandling.printError(ctx, "Dimension with the unit \""+unit+"\" does not exist.");
                  return null; 
               }
            } else
               resType = v1.type();
         }
      } else
         resType = new DoubleType();  


      Symbol resSymb;
      switch (op) {
         case "*":
            resSymb = new Symbol(resType,  new DoubleValue(v1.value().doubleValue() * v2.value().doubleValue()));
            if (resType.name().equals("integer") ||  resType.name().equals("double"))
               return resSymb;          
            resSymb.setDim(resType.name());
            return resSymb;
         case "/":
            if (v2.value().doubleValue()==0.0){
               ErrorHandling.printError(ctx, "Can't divide by zero.");
               return null;
            }
            resSymb = new Symbol(resType,  new DoubleValue(v1.value().doubleValue() / v2.value().doubleValue()));
            if (resType.name().equals("integer") ||  resType.name().equals("double"))
               return resSymb;          
            resSymb.setDim(resType.name());
            return resSymb;
      }
      return null;
   }

   @Override public Symbol visitExprPower(dimensionsParser.ExprPowerContext ctx) {
      Symbol v1 = visit(ctx.expr(0));
      Symbol v2 = visit(ctx.expr(1));

      Type resType = null;
      Symbol resSymb;
      String unit;
      if (!v1.dim().equals("")){
         if (v1.dim().equals(v2.dim())) {
            unit = ((DimensionsType) v1.type()).getUnit()+"^"+((DimensionsType)v2.type()).getUnit();
            resType = getExistingDimType(unit);
            if (resType == null){
               ErrorHandling.printError(ctx, "Dimension with the unit \""+unit+"\" does not exist.");
               return null;
            }
         } else {
            if (!v2.dim().equals("")){
               unit = ((DimensionsType) v1.type()).getUnit()+"^"+((DimensionsType)v2.type()).getUnit();
               resType = getExistingDimType(unit);
               if (resType == null){
                  ErrorHandling.printError(ctx, "Dimension with the unit \""+unit+"\" does not exist.");
                  return null;
               }
            } else
               resType = v1.type();
         }
         resSymb = new Symbol(resType, new DoubleValue(Math.pow(v1.value().doubleValue(),v2.value().doubleValue())));
         resSymb.setDim(resType.name());
      } else {
         resType = new DoubleType();
         resSymb = new Symbol(resType, new DoubleValue(Math.pow(v1.value().doubleValue(),v2.value().doubleValue())));
      }

      return resSymb;
   }

   @Override public Symbol visitExprID(dimensionsParser.ExprIDContext ctx) {
      String unit = ctx.ID().getText();
      // check if ID exists
      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()){
         if (dimensionsType.getUnits().containsKey(unit)) {
            Symbol temp;
            temp = new Symbol(dimensionsType, new DoubleValue(dimensionsType.getUnits().get(unit)));
            temp.setDim(dimensionsType.name());
            return temp;
         }
      }
      ErrorHandling.printError(ctx, "Unit \""+unit+"\" not defined.");
      return null;
   }

   @Override public Symbol visitDimSign(dimensionsParser.DimSignContext ctx) {
       if (ctx.sign.getText().equals("-")) {
         Symbol sym = visitChildren(ctx);
         sym.value().setDoubleValue(-sym.value().doubleValue());
         return sym;
      }
      return visitChildren(ctx);
   }
   
   @Override public Symbol visitDimPower(dimensionsParser.DimPowerContext ctx) {
      Symbol v1 = visit(ctx.unitdim(0));
      Symbol resSym;
      String n;
      if (ctx.unitdim(1)!=null) {
         Symbol v2 = visit(ctx.unitdim(1));
         Type resType = null;
         
         String unit = ((DimensionsType) v1.type()).getUnit()+"^"+((DimensionsType)v2.type()).getUnit();
         resType = getExistingDimType(unit);
         if (resType == null)
            resType = new DimensionsType("", unit, new DoubleType());
         resSym = new Symbol(resType, new DoubleValue(1.0));
         resSym.setDim(resType.name()); //so podemos meter

         return resSym;
      } else if (ctx.DOUBLE()!=null) {  
         n = ctx.DOUBLE().getText();    
      } else {
         n = ctx.INTEGER().getText();
      }
      Type resType = null;
         
      String unit = ((DimensionsType) v1.type()).getUnit()+"^"+n;
      resType = getExistingDimType(unit);
      if (resType == null)
         resType = new DimensionsType("", unit, new DoubleType());
      resSym = new Symbol(resType, new DoubleValue(1.0));
      resSym.setDim(resType.name()); //so podemos meter
      return resSym;
   }

   // @Override public Symbol visitDimUnn(dimensionsParser.DimUnnContext ctx) {
   //    return visitChildren(ctx);
   // }

   @Override public Symbol visitDimMultDiv(dimensionsParser.DimMultDivContext ctx) {
      String op = ctx.op.getText();
      Symbol v1 = visit(ctx.unitdim(0));
      Symbol v2 = visit(ctx.unitdim(1));

      Type resType = null;
      
      String unit = ((DimensionsType) v1.type()).getUnit()+op+((DimensionsType)v2.type()).getUnit();
      if (v1.dim().equals(v2.dim())) {
         switch (op) {
            case "*":
               resType = getExistingDimType(unit);
               if (resType == null)
                  resType = new DimensionsType("", unit, new DoubleType());
               break;
            case "/":
               resType = new DoubleType();
               break;
         }
      } else {        
         resType = getExistingDimType(unit);
         if (resType == null)
            resType = new DimensionsType("", unit, new DoubleType());
      }

      if (((DimensionsType) v1.type()).getType().name().equals("integer") || ((DimensionsType) v2.type()).getType().name().equals("integer"))
         ((DimensionsType) resType).setType(new IntegerType());
      Symbol resSymb = new Symbol(resType, new DoubleValue(1.0));
      resSymb.setDim(resType.name()); //so podemos meter
      return resSymb;
   }

   @Override public Symbol visitDimID(dimensionsParser.DimIDContext ctx) {   
      String dim = ctx.ID().getText();
      // check if ID exists
      
      for (String dimName : dimensionsParser.dimTable.keySet()){
         if (dimName.equals(dim)) {
            Symbol temp = new Symbol(dimensionsParser.dimTable.get(dimName), new DoubleValue(1.0));
            temp.setDim(dim);
            return temp;
         }
      }
      ErrorHandling.printError(ctx, "Dimensions \""+dim+"\" not defined.");
      return null;
   }

   public Type getExistingDimType(String unit) {
      for (DimensionsType dimensionsType : dimensionsParser.dimTable.values()){
         if (dimensionsType.getUnits().containsKey(unit)) {
           return dimensionsType;
         }
      }
      return null;
   }
}